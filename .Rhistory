data(faithful)
library(caret)
library(caret); data(faithful); set.seed(333)
inTrain <- createDataPartition(y = faithful$waiting, p = 0.5, list = FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
plot(trainFaith$waiting, trainFaith$eruptions, pch = 19, col = "blue")
lm1 <- lm(eruptions ~ waiting, data = trainFaith)
summary(lm1
)
lines(trainFaith$waiting, lm1$fitted.values, lwd = 3)
coef(lm1)[1] + coef(lm1)[2] * 80
predict(lm1, newdata = data.frame(waiting = 80))
par(mfrow = c(1,2))
plot(trainFaith$waiting, trainFaith$eruptions, pch = 19, col = "blue")
lines(trainFaith$waiting, predict(lm1), lwd = 3)
plot(testFaith$waiting, testFaith$eruptions, pch = 19, col = "blue")
lines(testFaith$waiting, predict(lm1, newdata = testFaith), lwd = 3)
sqrt(sum((lm1$fitted.values - trainFaith$eruptions) ^ 2)) # RMSE on training
sqrt(sum((predict(lm1, newdata = testFaith) - testFaith$eruptions) ^ 2)) # RMSE on test
par(mfrow = c(1,1))
pred1 <- predict(lm1, newdata = testFaith, interval = "prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting, testFaith$eruptions, pch = 19, col = "blue")
matlines(testFaith$waiting[ord], pred1[ord,], type = "l", col = c(1, 2, 2), lty = c(1, 1, 1), lwd = 3)
rm(list=ls())
library(ISLR); library(ggplot2); library(caret)
data(Wage); Wage <- subset(Wage, select = -c(logwage))
data(Wage)
Wage
head(Wage)
str(Wage)
data(Wage); Wage <- subset(Wage, select = -c(logwage))
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
featurePlot(x = training[,c("age", "education", "jobclass"), y = training$wage, plot = "pairs")
featurePlot(x = training[,c("age", "education", "jobclass")], y = training$wage, plot = "pairs")
qplot(age, wage, data = training)
qplot(age, wage, data = training, color = jobclass)
modFit <- train(wage ~ age + jobclass + education, method = "lm", data = training)
finMod <- modFit$finalModel
finMode
finMod
modFit
plot(finMod, 1, pcg = 19, cex = 0.5, col = "#00000010")
qplot(finMod$fitted, finMod$residuals, color = race, data = training)
plot(finMod$residuals, pch = 19)
pred <- predict(modFit, testing); qplot(wage, pred, color = year, data = testing)
modFitAll <- train(wage ~ ., data = training, method = "lm")
pred <- predict(modFitAll, testing)
qplot(wage, pred, data = testing)
install.packages("shiny")
library(shiny)
runExample("01_hello")
a = read.csv("D:\\temp\\fatsalmon.csv")
head(a)
str(a)
hist(a$Age)
library(ggplot2)
g <- ggplot(a, aes(x = Age)) + geom_histogram()
g
g <- ggplot(a, aes(x = Age)) + geom_histogram(binwidth = 5)
g
g <- ggplot(a, aes(x = Age)) + geom_histogram(binwidth = 5, color = "green", fill = "white")
g
g <- ggplot(a, aes(x = Age)) + geom_histogram(binwidth = 5, color = "darkgreen", fill = "white")
g + facet_grid(Sex ~ Category)
?aggregate
aggregate(x = a, by=list(Sex, Category), FUN="mean")
library(dplyr)
a %>% group_by(Category + Sex)
a %>% group_by(Category + Sex) %>% summarise(mean)
b=a %>% group_by(Category + Sex)
class(b)
b
?group_by
by_cat_sex = group_by(a, Category, Sex)
by_cat_sex
summarize(by_cat_sex, mean(Age))
a %>% group_by(Category, Sex) %>% summarise(mean(Age))
rm(list=ls())
a = rnorm(1000)
b = runif(1000)
plot(a, type = "l")
par(new = T)
plot(b, type = "l", col = "blue", xlab = "", ylab = "")
plot(a, type="l")
lines(b)
plot(a, type="l")
lines(b, col = "blue")
plot(b, type = "l", col = "blue", xlab = "", ylab = "")
plot(a, type="l")
a = rnorm(1000)
b = runif(1000)
plot(a, type = "l")
lines(b, col = "blue")
?matplot
matplot(cbind(a, b), type = 'l')
library(ggplot2)
ggplot(data = data.frame(a = a, b = b, x = 1:1000)) + geom_line(aes(x = x, y = a, colour = 'a')) + geom_line(aes(x = x, y = b, colour = 'b'))
plot(a, type="l")
lines(b, col = "blue")
?par
rm(list=ls())
library(shiny)
rm(list=ls())
setwd("../OneDrive/Courses/DataProducts")
require(devtools)
devtools::install_github('rstudio/shinyapps')
install.packages("devtools")
install.packages("devtools")
shinyapps::setAccountInfo(name='carlosfigueira', token='3603C8E7C01C153E395ECFFBF4071AB3', secret='wSemDQJyB5Hpzdkx+dZco/SeSIvoo5guaR9vNfiu')
dir()
setwd("shiny3")
shinyapps::deployApp()
getwd()
setwd("../project")
setwd("raw")
library(lubridate)
install.packages("lubridate")
library(lubridate)
rawActivities <- read.csv("../data/AllActivities.csv")
rawActivities$Start <- parse_date_time(substr(rawActivities$Start, 6, 100), "b d Y H M")
rawActivities$Best.SWOLF <- NULL
rawActivities$Avg.SWOLF <- NULL
rawActivities$Min.Strokes <- NULL
rawActivities$Avg.Strokes <- NULL
rawActivities$Total.Strokes <- NULL
rawActivities$X <- NULL
rawActivities$Favorite <- NULL
rawActivities$Activity.Name <- NULL
rawActivities$Activity.Type <- NULL
rawActivities$Course <- NULL
rawActivities$Calories <- as.numeric(gsub(",", "", rawActivities$Calories))
rawActivities$Max.Speed.Best.Pace. <- NULL
durations <- parse_date_time(rawActivities$Time, c("H M S", "M S"))
rawActivities$DurationMinutes <- hour(durations) * 60 + minute(durations) + second(durations) / 60
rawActivities$Elevation.Gain <- as.numeric(gsub(",", "", rawActivities$Elevation.Gain))
paces <- parse_date_time(rawActivities$Avg.Speed.Avg.Pace., "M S")
rawActivities$AvgPace <- minute(paces) + second(paces) / 60
runningActivities <- rawActivities[rawActivities$AvgPace < 12.5,]
fit <- lm(AvgPace ~ Distance, data = runningActivities)
newDistance <- data.frame(Distance = c(13.1))
predict(fit, newDistance)
getwd()
library(lubridate)
rawActivities <- read.csv("../data/AllActivities.csv")
rawActivities$Start <- parse_date_time(substr(rawActivities$Start, 6, 100), "b d Y H M")
rawActivities$Best.SWOLF <- NULL
rawActivities$Avg.SWOLF <- NULL
rawActivities$Min.Strokes <- NULL
rawActivities$Avg.Strokes <- NULL
rawActivities$Total.Strokes <- NULL
rawActivities$X <- NULL
rawActivities$Favorite <- NULL
rawActivities$Activity.Name <- NULL
rawActivities$Activity.Type <- NULL
rawActivities$Course <- NULL
rawActivities$Calories <- as.numeric(gsub(",", "", rawActivities$Calories))
rawActivities$Max.Speed.Best.Pace. <- NULL
durations <- parse_date_time(rawActivities$Time, c("H M S", "M S"))
rawActivities$DurationMinutes <- hour(durations) * 60 + minute(durations) + second(durations) / 60
rawActivities$Elevation.Gain <- as.numeric(gsub(",", "", rawActivities$Elevation.Gain))
paces <- parse_date_time(rawActivities$Avg.Speed.Avg.Pace., "M S")
rawActivities$AvgPace <- minute(paces) + second(paces) / 60
runningActivities <- rawActivities[rawActivities$AvgPace < 12.5,]
fit <- lm(AvgPace ~ Distance, data = runningActivities)
newDistance <- data.frame(Distance = c(13.1))
predict(fit, newDistance)
summary(fit)
str(runningActivities)
fit2 <- lm(AvgPace ~ Distance + Elevation.Gain, data = runningActivities)
fit2
fit2 <- lm(AvgPace ~ Distance + Calories, data = runningActivities)
fit2
runningActivities$CaloriesPerMile <- runningActivities$Calories / runningActivities$Distance
lm(AvgPace ~ Distance + CaloriesPerMile, data = runningActivities)
head(runningActivities$CaloriesPerMile)
runningActivities$HundredCaloriesPerMile <- (runningActivities$Calories / 100) / runningActivities$Distance
head(runningActivities$HundredCaloriesPerMile)
lm(AvgPace ~ Distance + HundredCaloriesPerMile, data = runningActivities)
fit
Sys.date()
Sys.time()
str(Sys.time())
Sys.time()[[1]]
Sys.time()[1]
Sys.time()$year
as.POSIXct(Sys.time())
str(as.POSIXct(Sys.time()))
as.POSIXlt(Sys.time())
str(as.POSIXlt(Sys.time()))
as.POSIXlt(Sys.time())$year
getwd()
shiny::runApp(appDir = "../shiny/RunningPredictor")
shiny::runApp(appDir = "../shiny/RunningPredictor")
shiny::runApp(appDir = "../shiny/RunningPredictor")
shiny::runApp(appDir = "../shiny/RunningPredictor")
shiny::runApp(appDir = "../shiny/RunningPredictor")
a=c(4,5)
a[1]
a[2]
a
shiny::runApp(appDir = "../shiny/RunningPredictor")
fit
predict(fit, data.frame(Distance = 13.1))
predict(fit, data.frame(Distance = 13.1)) * 13.1
t = predict(fit, data.frame(Distance = 13.1)) * 13.1
t
t/60
int(t/60)
floor(t/60)
t
h=floor(t/60)
?floor
class(t)
class(h)
t[1]
h[1]
m<-floor(t%60)
m<-floor(t mod 60)
?modulus
??modulus
5%2
5%/%2
5 %/% 2
5 %% 2
5 %% 3
10 %% 3
10 %% 7
m<-floor(t %% 60)
s<-floor(60 * (t - floor(t)))
shiny::runApp(appDir = "../shiny/RunningPredictor")
shiny::runApp(appDir = "../shiny/RunningPredictor", display.mode = "showcase")
shiny::runApp(appDir = "../shiny/RunningPredictor", display.mode = "showcase")
fit <- lm(AvgPace ~ Distance, data = runningActivities[runningActivities$AvgPace > 13,])
shiny::runApp(appDir = "../shiny/RunningPredictor", display.mode = "showcase")
getwe()
getwd()
setwd("../")
dir()
setwd("shiny")
dir()
setwd("RunningPredictor")
dir()
getwd()
shinyapps::deployApp()
getwd()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
library(devtools)
install_github("slidify", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify")
install.packages("evaluate")
install.packages("stringi")
install.packages("stringi")
install.packages("mime")
install.packages("evaluate")
install_github("ramnathv/slidify")
require(devtools)
install_github("ramnathv/slidify")
getwd()
setwd("D:\\git\\carlosfigueira\\coursera-developing-data-products\\slidify")
author("runningPredictorDeck")
library(slidify)
author("runningPredictorDeck")
slidify("index.Rmd")
slidify("index.Rmd")
install_github("ramnathv/slidifyLibraries")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
oldwd <- getwd()
setwd("../../raw")
dir()
source("exploratory.R")
setwd(oldwd)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish(title = "Running Predictor", "index.html", host = 'rpubs')
slidify("index.Rmd")
publish(user = "carlosfigueira", repo = "RunningPredictor")
publish(user = "carlosfigueira", repo = "RunningPredictor")
